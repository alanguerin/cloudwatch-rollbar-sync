buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "io.freefair.gradle:lombok-plugin:5.0.0"
    }
}

group 'com.alanguerin'
version '1.0-SNAPSHOT'

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.freefair.lombok'
    version = '1.0'

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    repositories {
        mavenCentral()
    }
    
    dependencies {
        ext {
            awsSdkVersion = '1.11.875'
            awsLambdaVersion = '1.2.1'
            awsLambdaEventsVersion = '3.3.1'
            awsLambdaLog4j2Version = '1.2.0'
            log4j2Version = '2.13.3'
            jacksonVersion = '2.11.3'
            apacheCommonsIOVersion = '2.8.0'
            apacheCommonsLangVersion = '3.11'
            rollbarVersion = '1.7.5'
            
            junitVersion = '5.7.0'
            assertjVersion = '3.17.2'
            mockitoVersion = '3.5.13'
            javaFakerVersion = '1.0.2'
        }
        
        implementation "com.amazonaws:aws-lambda-java-core:${awsLambdaVersion}"
        implementation "com.amazonaws:aws-lambda-java-events:${awsLambdaEventsVersion}"
        
        implementation "com.amazonaws:aws-lambda-java-log4j2:${awsLambdaLog4j2Version}"
        implementation "org.apache.logging.log4j:log4j-api:${log4j2Version}"
        implementation "org.apache.logging.log4j:log4j-core:${log4j2Version}"
        
        implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
        implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
        implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
        implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"

        implementation "commons-io:commons-io:${apacheCommonsIOVersion}"
        implementation "org.apache.commons:commons-lang3:${apacheCommonsLangVersion}"

        testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
        testImplementation "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
        testImplementation "org.junit.jupiter:junit-jupiter-params:${junitVersion}"
        testImplementation "org.assertj:assertj-core:${assertjVersion}"
        testImplementation "org.mockito:mockito-core:${mockitoVersion}"
        testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"

        testImplementation "com.github.javafaker:javafaker:${javaFakerVersion}"
    }

    configurations {
        allProjects { configuration ->
            configuration.exclude group: "junit", module: "junit"
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/java/'
        test.java.srcDirs += 'src/test/java/'
    }

    task unitTest(type: Test) {
        useJUnitPlatform {
            maxParallelForks = Runtime.runtime.availableProcessors()
            include '**/*UTest.class'
        }
        failFast = true
    }

    task integrationTest(type: Test) {
        useJUnitPlatform {
            include '**/*ITest.class'
        }
        failFast = true
    }

    task buildZip(type: Zip) {
        archiveFileName = project.name + '.zip'
        from compileJava
        from processResources
        into('lib') {
            from configurations.runtimeClasspath
        }
    }

    build.dependsOn buildZip
}

project('function-cloudwatch2rollbar') {
    dependencies {
        implementation "com.amazonaws:aws-java-sdk-cloudwatch:${awsSdkVersion}"
        implementation "com.rollbar:rollbar-java:${rollbarVersion}"
        implementation "org.apache.logging.log4j:log4j-slf4j-impl:${log4j2Version}"
    }
}
